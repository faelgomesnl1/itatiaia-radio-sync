<style>
  .textarea-autoexpand {
    min-height: 40px;
    resize: none;
    overflow-y: hidden;
  }

  .grupoCheckboxes {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }

  .checkboxItem {
    flex: 1 1 200px;
  }

  .textarea-centralizado {
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
    display: block;
  }

  .textarea-observacoes {
    border: 1px solid #ced4da;
    border-radius: 4px;
    padding: 8px;
  }

  .container-centralizado {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .botao-pequeno {
    padding: 5px 10px;
    font-size: 14px;
    width: auto;
  }

  .selecao-pequena {
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
    font-size: 14px;
    padding: 5px;
  }

  .item-lista {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 5px;
    margin-bottom: 10px;
  }

  .botoes-container {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin: 20px 0;
  }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

<body>
  <div class="container-centralizado">
    <form action="/links/cadastros/cadastroPlanejamentoADMPost/{{evento.id}}" method="POST" onsubmit="return valida();">
      <div class="text-center mt-3 mb-4">
        <h2>{{evento.titulo}}</h2>
      </div>

      {{!-- Loop por todos os setores --}}
      {{#each setores}}
      <div class="blocoPlanejamento p-4 border rounded mb-5">
        <div class="text-center mb-3">
          <h3 class="mt-2">{{this.name}}</h3>
          <input type="hidden" name="planejamentos[{{@index}}][id_setor]" value="{{this.id}}">
          {{#if this.planejamento}}
            <input type="hidden" name="planejamentos[{{@index}}][id_planejamento]" value="{{this.planejamento.id}}">
          {{/if}}
        </div>
        {{!-- Funcionários --}}
        <div class="grupoGap8pxDesktop text-center">
          <p class="textoInputPadraoDesktop">Funcionários</p>
          <div id="listaFuncionarios-{{@index}}" class="listaFuncionarios mt-2">
            {{#if this.planejamento}}
              {{#each this.planejamento.funcionarios}}
                <div class="funcionario-item">
                  <input type="hidden" name="planejamentos[{{@../index}}][funcionarios][]" value="{{this.id}}">
                  <span>{{this.nome}}</span>
                </div>
              {{/each}}
            {{/if}}
          </div>
          <div class="botoes-container">
            <button type="button" class="botaoPadraoDesktop botao-pequeno" onclick="adicionarFuncionario({{@index}})">
              <i class="fas fa-user-plus"></i> Adicionar Funcionário
            </button>
          </div>
        </div>

        {{!-- Conteúdo --}}
        {{#if this.ehRadio}}
          <div class="grupoGap8pxDesktop text-center mt-4">
            <p class="textoInputPadraoDesktop">Conteúdo</p>
            <div id="listaConteudos-{{@index}}" class="listaConteudos mt-2">
              {{#if this.planejamento}}
                {{#each this.planejamento.programas}}
                  <div class="conteudo-item">
                    <input type="hidden" name="planejamentos[{{@../index}}][conteudos][]" value="{{this.id}}">
                    <span>{{this.nome}}</span>
                  </div>
                {{/each}}
              {{/if}}
            </div>
            <div class="botoes-container">
              <button type="button" class="botaoPadraoDesktop botao-pequeno" onclick="adicionarConteudo({{@index}})">
                <i class="fas fa-plus-circle"></i> Adicionar Conteúdo
              </button>
            </div>
          </div>
        {{else}}
          <div class="grupoGap8pxDesktop mt-4">
            <p class="textoInputPadraoDesktop text-center">Conteúdo</p>
            <textarea 
              name="planejamentos[{{@index}}][conteudo_radio]" 
              class="inputPadraoDesktop textarea-autoexpand textarea-centralizado"
              placeholder="Descreva o conteúdo deste setor">{{this.planejamento.observacao_geral}}</textarea>
          </div>
        {{/if}}

        {{!-- Produção --}}
        <div class="grupoGap8pxDesktop mt-4">
          <p class="textoInputPadraoDesktop text-center">Produção</p>
          <textarea 
            name="planejamentos[{{@index}}][producao]" 
            class="inputPadraoDesktop textarea-autoexpand textarea-centralizado"
            placeholder="Descreva a produção">{{this.planejamento.producao}}</textarea>
        </div>

        {{!-- Escala --}}
        <div class="grupoGap8pxDesktop mt-4">
          <p class="textoInputPadraoDesktop text-center">Escala</p>
          <textarea 
            name="planejamentos[{{@index}}][escala]" 
            class="inputPadraoDesktop textarea-autoexpand textarea-centralizado"
            placeholder="Descreva a escala">{{this.planejamento.escala}}</textarea>
        </div>

        {{!-- Logística --}}
        <div class="grupoGap8pxDesktop mt-4">
          <p class="textoInputPadraoDesktop text-center">Logística</p>
          <textarea 
            name="planejamentos[{{@index}}][logistica]" 
            class="inputPadraoDesktop textarea-autoexpand textarea-centralizado"
            placeholder="Descreva a logística">{{this.planejamento.logistica}}</textarea>
        </div>

        {{!-- Outros --}}
        <div class="grupoGap8pxDesktop mt-4">
          <p class="textoInputPadraoDesktop text-center">Outros</p>
          <textarea 
            name="planejamentos[{{@index}}][outros]" 
            class="inputPadraoDesktop textarea-autoexpand textarea-centralizado"
            placeholder="Outras observações">{{this.planejamento.outros}}</textarea>
        </div>
      </div>
      {{/each}}

      <div class="d-flex justify-content-center my-4">
        <button type="submit" class="botaoPadraoDesktop">Salvar Planejamentos</button>
      </div>
    </form>
  </div>
</body>
<script type="text/javascript" language="javascript" src="https://code.jquery.com/jquery-3.5.1.js"></script>

<script>
  const funcionarios = {{{ funcionarios }}};
  const programas = {{{ programas }}};
  const ehRadio = {{{ ehRadio }}}
  const ehVideo = {{{ ehVideo}}}

  function adicionarFuncionario() {
    const lista = document.querySelector('.listaFuncionarios');
    const maxFuncionarios = 10;

    if (lista.childElementCount >= maxFuncionarios) {
      alert("Máximo de 10 funcionários.");
      return;
    }

    const container = document.createElement('div');
    container.className = "item-lista mb-2 position-relative";

    const input = document.createElement('input');
    input.type = "text";
    input.name = "funcionarios_nomes[]";
    input.className = "form-control funcionario-autocomplete";
    input.placeholder = "Digite o nome do funcionário";
    input.setAttribute("autocomplete", "off");
    input.required = true;

    const datalist = document.createElement('ul');
    datalist.className = "autocomplete-list list-group position-absolute w-100";
    datalist.style.top = "100%"; // exibe abaixo do input
    datalist.style.zIndex = "1000";
    datalist.style.maxHeight = "150px";
    datalist.style.overflowY = "auto";
    datalist.hidden = true;

    input.addEventListener('input', () => {
      const valor = input.value.toLowerCase();
      datalist.innerHTML = '';
      if (valor.length === 0) {
        datalist.hidden = true;
        return;
      }

      // Lista nomes já usados
      const usados = Array.from(document.querySelectorAll('input[name="funcionarios_nomes[]"]'))
        .filter(el => el !== input)
        .map(el => el.value.trim().toLowerCase());

      const resultados = funcionarios.filter(f =>
        f.name.toLowerCase().includes(valor) && !usados.includes(f.name.toLowerCase())
      );

      if (resultados.length === 0) {
        datalist.hidden = true;
        return;
      }

      resultados.forEach(f => {
        const item = document.createElement('li');
        item.textContent = f.name;
        item.className = "list-group-item list-group-item-action";
        item.onclick = () => {
          input.value = f.name;
          datalist.hidden = true;

          // cria/atualiza um hidden input com o id do funcionário
          let hidden = container.querySelector('input[name="funcionarios_ids[]"]');
          if (!hidden) {
            hidden = document.createElement('input');
            hidden.type = "hidden";
            hidden.name = "funcionarios_ids[]";
            container.appendChild(hidden);
          }
          hidden.value = f.id;
        };
        datalist.appendChild(item);
      });

      datalist.hidden = false;
    });

    document.addEventListener('click', e => {
      if (!container.contains(e.target)) {
        datalist.hidden = true;
      }
    });

    const botaoRemover = document.createElement('button');
    botaoRemover.type = "button";
    botaoRemover.innerHTML = '<i class="fas fa-trash-alt"></i> Remover';
    botaoRemover.className = "btn btn-danger btn-sm mt-1";
    botaoRemover.onclick = () => container.remove();

    container.appendChild(input);
    container.appendChild(datalist);
    container.appendChild(botaoRemover);
    lista.appendChild(container);
  }

  function adicionarConteudo(indiceSetor) {
    console.log('adicionarConteudo chamado para setor:', indiceSetor);
    
    const lista = document.getElementById(`listaConteudos-${indiceSetor}`);
    const maxConteudos = 12;

    if (!lista) {
        console.error(`Lista de conteúdos não encontrada para o setor ${indiceSetor}`);
        return;
    }

    if (lista.children.length >= maxConteudos) {
        alert("Máximo de 12 conteúdos.");
        return;
    }

    const container = document.createElement('div');
    container.className = "conteudo-item mb-2 position-relative";

    // Input para nome do conteúdo
    const input = document.createElement('input');
    input.type = "text";
    input.name = `planejamentos[${indiceSetor}][conteudos_nomes][]`;
    input.className = "form-control programa-autocomplete";
    input.placeholder = "Digite o nome do programa";
    input.setAttribute("autocomplete", "off");
    input.required = true;

    // Hidden input para ID do conteúdo
    const hiddenId = document.createElement('input');
    hiddenId.type = "hidden";
    hiddenId.name = `planejamentos[${indiceSetor}][conteudos_ids][]`;

    // Lista de autocomplete
    const datalist = document.createElement('ul');
    datalist.className = "autocomplete-list";
    datalist.style.cssText = `
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        z-index: 1000;
        max-height: 150px;
        overflow-y: auto;
        background: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        display: none;
    `;

    // Evento de input para autocomplete
    input.addEventListener('input', function() {
        const valor = this.value.toLowerCase();
        datalist.innerHTML = '';
        
        if (valor.length === 0) {
            datalist.style.display = 'none';
            return;
        }

        // Filtra programas (assumindo que 'programas' é uma variável global)
        const resultados = window.programas ? window.programas.filter(p => 
            p.name.toLowerCase().includes(valor)
        ) : [];

        if (resultados.length === 0) {
            datalist.style.display = 'none';
            return;
        }

        resultados.forEach(p => {
            const item = document.createElement('li');
            item.textContent = p.name;
            item.style.cssText = `
                padding: 8px 12px;
                cursor: pointer;
                border-bottom: 1px solid #eee;
            `;
            item.addEventListener('click', function() {
                input.value = p.name;
                hiddenId.value = p.id;
                datalist.style.display = 'none';
            });
            datalist.appendChild(item);
        });

        datalist.style.display = 'block';
    });

    // Fecha autocomplete ao clicar fora
    document.addEventListener('click', function(e) {
        if (!container.contains(e.target)) {
            datalist.style.display = 'none';
        }
    });

    // Textarea para observações
    const textarea = document.createElement('textarea');
    textarea.name = `planejamentos[${indiceSetor}][obs_conteudo][]`;
    textarea.className = "form-control mt-1";
    textarea.placeholder = "Observações (opcional)";
    textarea.style.minHeight = "30px";
    textarea.style.resize = "vertical";

    // Botão remover
    const botaoRemover = document.createElement('button');
    botaoRemover.type = "button";
    botaoRemover.innerHTML = '<i class="fas fa-trash-alt"></i> Remover';
    botaoRemover.className = "btn btn-sm btn-danger mt-1";
    botaoRemover.addEventListener('click', function() {
        container.remove();
    });

    // Monta o container
    container.appendChild(input);
    container.appendChild(hiddenId);
    container.appendChild(datalist);
    container.appendChild(textarea);
    container.appendChild(botaoRemover);

    // Adiciona à lista
    lista.appendChild(container);
    
    // Foca no input
    input.focus();
}


  // Autoexpand para textarea
  document.addEventListener('input', function (e) {
    if (e.target.classList.contains('textarea-autoexpand')) {
      e.target.style.height = 'auto';
      e.target.style.height = (e.target.scrollHeight) + 'px';
    }
  });

  function valida() {
    const funcionarios = document.querySelectorAll('input[name="funcionarios_nomes[]"]');
    const programas = document.querySelectorAll('input[name="programas_nomes[]"]');

    if (funcionarios.length === 0 && !ehVideo ) {
      alert("Adicione pelo menos um funcionário.");
      return false;
    }

    if (ehRadio) {
      if (programas.length === 0) {
        alert("Adicione pelo menos um conteúdo.");
        return false;
      }
    }

    return true;
  }

  document.addEventListener('input', function (e) {
    if (e.target.classList.contains('textarea-autoexpand')) {
      e.target.style.height = 'auto';
      e.target.style.height = (e.target.scrollHeight) + 'px';
    }
  });
</script>

<script>
  // funcionarios será um array de objetos: [{id, name, setor_id, setor_nome}, ...]
  const funcionarios = {{{funcionariosJson}}} || [];

  // Fecha listas de autocomplete quando clicar fora (adiciona apenas 1 listener global)
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.item-lista') && !e.target.closest('.autocomplete-list')) {
      document.querySelectorAll('.autocomplete-list').forEach(dl => dl.hidden = true);
    }
  });

  function adicionarFuncionario(index) {
    const lista = document.getElementById(`listaFuncionarios-${index}`);
    if (!lista) {
      console.warn('Lista de funcionários não encontrada para index', index);
      return;
    }

    const setorId = lista.dataset.setorId ? Number(lista.dataset.setorId) : null;
    const maxFuncionarios = 10;

    // Conta itens já exibidos (itens pré-existentes + novos)
    const existingCount = lista.querySelectorAll('.item-lista, .funcionario-item').length;
    if (existingCount >= maxFuncionarios) {
      alert("Máximo de 10 funcionários por setor.");
      return;
    }

    // container do input/autocomplete
    const container = document.createElement('div');
    container.className = "item-lista mb-2 position-relative";

    const input = document.createElement('input');
    input.type = "text";
    input.name = `planejamentos[${index}][funcionarios_nomes][]`;
    input.className = "form-control funcionario-autocomplete";
    input.placeholder = "Digite o nome do funcionário";
    input.setAttribute("autocomplete", "off");
    input.required = true;

    const datalist = document.createElement('ul');
    datalist.className = "autocomplete-list list-group position-absolute w-100";
    datalist.style.top = "100%";
    datalist.style.zIndex = "1000";
    datalist.style.maxHeight = "150px";
    datalist.style.overflowY = "auto";
    datalist.hidden = true;

    // Evento de input para preencher o autocomplete (filtra por setor)
    input.addEventListener('input', () => {
      const valor = input.value.trim().toLowerCase();
      datalist.innerHTML = '';
      if (valor.length === 0) {
        datalist.hidden = true;
        return;
      }

      // nomes já usados neste bloco
      const usados = Array.from(lista.querySelectorAll(`input[name="planejamentos[${index}][funcionarios_nomes][]"]`))
        .filter(el => el !== input)
        .map(el => el.value.trim().toLowerCase());

      const resultados = funcionarios.filter(f => {
        const matchesName = f.name.toLowerCase().includes(valor);
        const sameSector = setorId == null ? true : Number(f.setor_id) === setorId;
        const notUsed = !usados.includes(f.name.toLowerCase());
        return matchesName && sameSector && notUsed;
      });

      if (resultados.length === 0) {
        datalist.hidden = true;
        return;
      }

      resultados.forEach(f => {
        const item = document.createElement('li');
        item.className = "list-group-item list-group-item-action";
        item.textContent = f.name + (f.setor_nome ? ` (${f.setor_nome})` : '');
        item.onclick = () => {
          input.value = f.name;
          datalist.hidden = true;

          // cria/atualiza hidden input com o id do funcionário (por setor/planejamento)
          let hidden = container.querySelector(`input[name="planejamentos[${index}][funcionarios_ids][]"]`);
          if (!hidden) {
            hidden = document.createElement('input');
            hidden.type = "hidden";
            hidden.name = `planejamentos[${index}][funcionarios_ids][]`;
            container.appendChild(hidden);
          }
          hidden.value = f.id;
        };
        datalist.appendChild(item);
      });

      datalist.hidden = false;
    });

    // Botão remover
    const botaoRemover = document.createElement('button');
    botaoRemover.type = "button";
    botaoRemover.innerHTML = '<i class="fas fa-trash-alt"></i>';
    botaoRemover.className = "btn btn-danger btn-sm mt-1";
    botaoRemover.onclick = () => container.remove();

    container.appendChild(input);
    container.appendChild(datalist);
    container.appendChild(botaoRemover);
    lista.appendChild(container);

    // foca o input recém-criado
    input.focus();
  }
</script>

<script>
const programas = {{{programas}}}
function adicionarConteudo(index) {
    const lista = document.getElementById(`listaConteudos-${index}`);
    if (!lista) {
      console.warn('Lista de conteúdos não encontrada para index', index);
      return;
    }

    const maxConteudos = 12;

    // Conta itens já exibidos (itens pré-existentes + novos)
    const existingCount = lista.querySelectorAll('.item-lista, .conteudo-item').length;
    if (existingCount >= maxConteudos) {
      alert("Máximo de 12 conteúdos por setor.");
      return;
    }

    // container do input/autocomplete
    const container = document.createElement('div');
    container.className = "item-lista mb-2 position-relative";

    const input = document.createElement('input');
    input.type = "text";
    input.name = `planejamentos[${index}][conteudos_nomes][]`;
    input.className = "form-control conteudo-autocomplete";
    input.placeholder = "Digite o nome do programa";
    input.setAttribute("autocomplete", "off");
    input.required = true;

    const datalist = document.createElement('ul');
    datalist.className = "autocomplete-list list-group position-absolute w-100";
    datalist.style.top = "100%";
    datalist.style.zIndex = "1000";
    datalist.style.maxHeight = "150px";
    datalist.style.overflowY = "auto";
    datalist.hidden = true;

    // Evento de input para preencher o autocomplete
    input.addEventListener('input', () => {
      const valor = input.value.trim().toLowerCase();
      datalist.innerHTML = '';
      if (valor.length === 0) {
        datalist.hidden = true;
        return;
      }

      // nomes já usados neste bloco
      const usados = Array.from(lista.querySelectorAll(`input[name="planejamentos[${index}][conteudos_nomes][]"]`))
        .filter(el => el !== input)
        .map(el => el.value.trim().toLowerCase());

      const resultados = programas.filter(p => {
        const matchesName = p.name.toLowerCase().includes(valor);
        const notUsed = !usados.includes(p.name.toLowerCase());
        return matchesName && notUsed;
      });

      if (resultados.length === 0) {
        datalist.hidden = true;
        return;
      }

      resultados.forEach(p => {
        const item = document.createElement('li');
        item.className = "list-group-item list-group-item-action";
        item.textContent = p.name;
        item.onclick = () => {
          input.value = p.name;
          datalist.hidden = true;

          // cria/atualiza hidden input com o id do programa
          let hidden = container.querySelector(`input[name="planejamentos[${index}][conteudos_ids][]"]`);
          if (!hidden) {
            hidden = document.createElement('input');
            hidden.type = "hidden";
            hidden.name = `planejamentos[${index}][conteudos_ids][]`;
            container.appendChild(hidden);
          }
          hidden.value = p.id;
        };
        datalist.appendChild(item);
      });

      datalist.hidden = false;
    });

    // Textarea para observações
    const textarea = document.createElement('textarea');
    textarea.name = `planejamentos[${index}][obs_conteudo][]`;
    textarea.className = "form-control textarea-autoexpand textarea-observacoes mt-1";
    textarea.placeholder = "Observações (opcional)";
    textarea.style.minHeight = "30px";

    // Botão remover
    const botaoRemover = document.createElement('button');
    botaoRemover.type = "button";
    botaoRemover.innerHTML = '<i class="fas fa-trash-alt"></i> Remover';
    botaoRemover.className = "btn btn-danger btn-sm mt-1";
    botaoRemover.onclick = () => container.remove();

    container.appendChild(input);
    container.appendChild(datalist);
    container.appendChild(textarea);
    container.appendChild(botaoRemover);
    lista.appendChild(container);

    // foca o input recém-criado
    input.focus();
  }
</script>